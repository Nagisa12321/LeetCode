1. 编写C函数,在输入的链表中,如果存在任意两个节点的value之和为0,则将两个节点都删除(free),确保剩下节点中任意两两value之和都不为0,返回剩下的链表.
typedef struct xnode{
    int value;
    struct xnode* next;    
} xnode;

xnode* delete_zero_sum_nodes(xnode* list) {
    // 你的代码 ...

    if (list == NULL) return NULL;
    else if (list -> next == NULL) return list;
    else if (list -> value + list -> next -> value == 0) return delete_zero_sum_nodes(list -> next -> next);
    list -> next = delete_zero_sum_nodes(list -> next);
    return list;
}

2. 有二进制文件input.data,将其每一个字节都视为一个无符号整数,编写代码,找出其中出现次数最多的整数,输出其数值和出现次数,编程语言不限.

public class Solution2 {

    public static void main(String[] args) throws IOException {
        // 读取文件
        InputStream fis = new FileInputStream("input.data");

        // 用来统计的map
        int[] map = new int[256];

        // 一边read一边统计
        // fis输入流读到 -1 为文件结束符
        int data;
        while ((data = fis.read()) != -1) {
            map[data]++;
        }

        // 统计值和出现次数
        int times = 0; // 出现次数
        int res = 0; // 值
        for (int i = 0; i < 256; i++) {
            if (map[i] > times) {
                times = map[i];
                res = i;
            }
        }

        // 输出值和出现次数
        System.out.println("[value: " + res + ", appear times: " + times + "]");
    }

}


3. 有文本文件input.txt, 每行都记录了一个城市名称和一个数字区段,形如: "城市名,m,n",其中,城市名称不会重复,m,n都是正整数,且m<n,所有的数字区间[m,n]都不会发生交叠.
请编写代码,对输入的任意整数x,查找其是否命中某个城市对应的数字区间,如命中则输出对应的城市名,编程语言不限.

public class Solution3 {
    public static void main(String[] args) throws IOException {
        // 读取文件
        InputStream fis = new FileInputStream("input.data");
        BufferedReader reader = new BufferedReader(new InputStreamReader(fis));

        Map<Integer, String> cityMap = new HashMap<>(); // 通过左区间找城市名
        Map<Integer, Integer> rightMap = new HashMap<>(); // 通过左区间找右区间
        // 一行一行的读, 存在两个map中
        String line;
        while ((line = reader.readLine()) != null) {
            String[] strs = line.split(",");
            int left = Integer.parseInt(strs[1]);

            rightMap.put(left, Integer.parseInt(strs[2]));
            cityMap.put(left, strs[0]);
        }

        // 将左区间的集合变成一个排序好的数组 -> nums
        int len = cityMap.keySet().size();
        int[] nums = new int[len];
        int idx = 0;
        for (int num : cityMap.keySet()) {
            nums[idx++] = num;
        }
        Arrays.sort(nums);

        // 我的思路是先二分查找, 找到一个对于target合适的左区间
        // 接着判断target值是否也在右边区间内
        Scanner sc = new Scanner(System.in);
        while (true) {
            int target = sc.nextInt();

            int left = 0; // 目标的左区间
            int lo = 0, hi = len - 1;
            while (lo <= hi) {
                int mid = lo + (hi - lo) / 2;
                // 如果当前mid对应的值就是target, 说明target刚好就是左区间
                // 如果当前mid的对应的值小于target, 而且mid为数组最右或者mid+1对应的值比target大, 说明mid为左区间
                // 两种情况直接break
                if (nums[mid] == target || (nums[mid] < target && (mid == len - 1 || nums[mid + 1] > target))) {
                    left = mid;
                    break;
                } else if (nums[mid] < target) lo = mid + 1;
                else hi = mid - 1;
            }

            // 判断右区间是否符合要求
            int right = rightMap.get(nums[left]);
            if (right >= target) {
                // 存在区间内
                String city = cityMap.get(nums[left]);
                System.out.println("your target is in [" + nums[left] + ", " + right + "] and the city is " + city + ".");
            } else {
                // 不在区间内
                System.out.println("your target is not in the areas.");
            }
        }
    }
}



4. 某项目X的代码引用了若干个外部模块,每个模块以一个唯一的字符串作为标识,外部的模块也会相互引用,经过一个工具的扫描,生成了所有的模块和它们之间的引用关系,用文本文件modules.txt表示,示例:
honnef,renameio
zap,honnef
tcaplus,zap
X,tcaplus
..., ...
即每行两个模块名,以逗号分隔,表示前面的模块引用了后面的模块,其中名为X的模块代表本项目.
请编写代码,通过这个文本文件(modules.txt)分析这些模块是否出现了循环引用,编程语言不限.



由于不知道模块是否能引用多个, 我写了两种, 第一种是多个引用, 第二种是单个引用
/*------------------------------多个引用--------------------------------------*/
public class Solution4 {
    public static void main(String[] args) throws IOException {
        // 读取文件
        InputStream fis = new FileInputStream("input.data");
        BufferedReader reader = new BufferedReader(new InputStreamReader(fis));

        // 保存第一个节点
        Model head = null;
        // 一行一行的读, 建立引用关系
        Map<String, Model> modelMap = new HashMap<>();
        String line;

        while ((line = reader.readLine()) != null) {
            String[] strs = line.split(",");
            String model0Name = strs[0];
            String model1Name = strs[1];

            Model model0;
            Model model1;

            if (modelMap.containsKey(model0Name)) model0 = modelMap.get(model0Name);
            else {
                model0 = new Model(model0Name);
                modelMap.put(model0Name, model0);
            }
            if (modelMap.containsKey(model1Name)) model1 = modelMap.get(model1Name);
            else {
                model1 = new Model(model1Name);
                modelMap.put(model1Name, model1);
            }
            model0.models.add(model1);

            if (head == null) head = model0;
        }

        if (head == null) {
            // 文件里没东西, 也就不存在循环引用
            System.out.println("is round? false");
        } else {
            // 用HashSet记录重复, 进行一下dfs
            HashSet<String> names = new HashSet<>();
            System.out.println("is round? " + isRound(head, names));
        }
    }

    private static boolean isRound(Model model, Set<String> names) {
        if (names.contains(model.modelName)) return true;
        names.add(model.modelName);

        boolean result = false;
        for (Model curModel : model.models) {
            result = result || isRound(curModel, names);
        }

        return result;
    }

    // 代表模块的数据结构
    public static class Model {
        private final String modelName; // 模块名
        private final List<Model> models; // 引用

        public Model(String modelName) {
            this.modelName = modelName;
            models = new ArrayList<>();
        }

        @Override
        public String toString() {
            return modelName;
        }
    }
}



/*------------------------------单个引用--------------------------------------*/
public class Solution5 {
    public static void main(String[] args) throws IOException {
        // 读取文件
        InputStream fis = new FileInputStream("input.data");
        BufferedReader reader = new BufferedReader(new InputStreamReader(fis));

        // 保存第一个节点
        Model head = null;
        // 一行一行的读, 建立引用关系
        Map<String, Model> modelMap = new HashMap<>();
        String line;

        while ((line = reader.readLine()) != null) {
            String[] strs = line.split(",");
            String model0Name = strs[0];
            String model1Name = strs[1];

            Model model0;
            Model model1;

            if (modelMap.containsKey(model0Name)) model0 = modelMap.get(model0Name);
            else {
                model0 = new Model(model0Name);
                modelMap.put(model0Name, model0);
            }
            if (modelMap.containsKey(model1Name)) model1 = modelMap.get(model1Name);
            else {
                model1 = new Model(model1Name);
                modelMap.put(model1Name, model1);
            }
            model0.linkModel = model1;

            if (head == null) head = model0;
        }

        System.out.println("is round? " + isRound(head));
    }

    // 相当于判断有没有环形链表
    private static boolean isRound(Model model) {
        // 快慢指针
        Model fast = model;
        Model slow = model;

        // fast没走到终点, slow也肯定没有
        while (fast != null && fast.linkModel != null) {
            fast = fast.linkModel.linkModel;
            slow = slow.linkModel;

            if (fast == slow) return true;
        }

        return false;
    }

    // 代表模块的数据结构
    public static class Model {
        private final String modelName; // 模块名
        private Model linkModel; // 引用

        public Model(String modelName) {
            this.modelName = modelName;
        }

        @Override
        public String toString() {
            return modelName;
        }
    }
}
